type User
  @model(subscriptions: null)
  @key(name: "getUserByEmail", fields: ["email"])
  @auth(
    rules: [
      { allow: owner, ownerField: "id" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  email: AWSEmail
  phone: AWSPhone
  firstname: String
  lastname: String
  avatar: S3Object
  bio: String
  linkedIn: String
  teams: [TeamUserLink] @connection(keyName: "teamsByUser", fields: ["id"])
  createdAt: AWSDateTime
}

type TeamUserLink
  @model(queries: null, mutations: null, subscriptions: null)
  @key(name: "usersByTeam", fields: ["teamID"])
  @key(name: "teamsByUser", fields: ["userID"])
  @auth(rules: [{ allow: owner, ownerField: "userID" }]) {
  id: ID!
  userID: ID!
  user: User @connection(fields: ["userID"])
  teamID: ID!
  team: Team @connection(fields: ["teamID"])
}

type Team
  @model(mutations: null, subscriptions: null)
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  members: [TeamUserLink] @connection(keyName: "usersByTeam", fields: ["id"])
  startup: Startup @connection
  investor: Investor @connection
}

type Startup
  @model(mutations: null, subscriptions: null)
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String
  logo: S3Object
  summary: String
  pitch: S3Object
  industries: [IndustryStartupLink]
    @connection(keyName: "industriesByStartup", fields: ["id"])
  stage: [StageEnum]
  capitalDemand: Int
  team: Team! @connection
  createdAt: AWSDateTime
}

type Investor
  @model(mutations: null, subscriptions: null)
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String
  logo: S3Object
  summary: String
  industries: [IndustryInvestorLink]
    @connection(keyName: "industriesByInvestor", fields: ["id"])
  stage: [StageEnum]
  capitalInvestMin: Int
  capitalInvestMax: Int
  team: Team! @connection
  bookmarks: [Startup] @connection
  channels: [Channel] @connection
  createdAt: AWSDateTime
}

type Channel @model {
  id: ID!
  startup: Startup @connection
  investor: Investor @connection
  messages: [Message] @connection
  createdAt: AWSDateTime
}

type Message @model @auth(rules: [{ allow: owner, ownerField: "sender" }]) {
  id: ID!
  sender: User @connection
  channel: Channel @connection
  content: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Industry
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: groups, groups: ["admin"] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String
  startups: [IndustryStartupLink]
    @connection(keyName: "startupsByIndustry", fields: ["id"])
  investors: [IndustryInvestorLink]
    @connection(keyName: "investorsByIndustry", fields: ["id"])
}
type IndustryStartupLink
  @model(queries: null, mutations: null, subscriptions: null)
  @key(name: "startupsByIndustry", fields: ["industryID"])
  @key(name: "industriesByStartup", fields: ["startupID"])
  @auth(rules: [{ allow: groups, groups: ["admin"] }]) {
  id: ID!
  industryID: ID!
  industry: Industry @connection(fields: ["industryID"])
  startupID: ID!
  startup: Startup @connection(fields: ["startupID"])
}
type IndustryInvestorLink
  @model(queries: null, mutations: null, subscriptions: null)
  @key(name: "investorsByIndustry", fields: ["industryID"])
  @key(name: "industriesByInvestor", fields: ["investorID"])
  @auth(rules: [{ allow: groups, groups: ["admin"] }]) {
  id: ID!
  industryID: ID!
  industry: Industry @connection(fields: ["industryID"])
  investorID: ID!
  investor: Investor @connection(fields: ["investorID"])
}

enum StageEnum {
  IDEA
  BUSINESS_PLAN
  MVP
  PAYING_CUSTOMERS
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Mutation {
  updateTeam(input: UpdateTeamInput!): Team
    @function(name: "1PitchTeamAuthorizer-${env}")
    @function(name: "1PitchTeam-${env}")

  createStartup(input: CreateStartupInput!): Startup
    @function(name: "1PitchTeam-${env}")
  updateStartup(input: UpdateStartupInput!): Startup
    @function(name: "1PitchTeam-${env}")
  deleteStartup(input: DeleteStartupInput!): Startup
    @function(name: "1PitchTeam-${env}")

  createInvestor(input: CreateInvestorInput!): Investor
    @function(name: "1PitchTeam-${env}")
  updateInvestor(input: UpdateInvestorInput!): Investor
    @function(name: "1PitchTeam-${env}")
  deleteInvestor(input: DeleteInvestorInput!): Investor
    @function(name: "1PitchTeam-${env}")
}

input S3ObjectInput {
  bucket: String!
  region: String!
  key: String!
}

input UpdateTeamInput {
  id: ID!
  name: String
  logo: S3ObjectInput
}

input CreateStartupInput {
  id: ID
  name: String!
  logo: S3ObjectInput
  summary: String
  pitch: S3ObjectInput
  stage: [StageEnum]
  capitalDemand: Int
  createdAt: AWSDateTime
  startupTeamId: ID!
  investorBookmarksId: ID
  industryStartupsId: ID
}
input UpdateStartupInput {
  id: ID!
  name: String
  logo: S3ObjectInput
  summary: String
  pitch: S3ObjectInput
  stage: [StageEnum]
  capitalDemand: Int
  createdAt: AWSDateTime
  startupTeamId: ID
  investorBookmarksId: ID
  industryStartupsId: ID
}
input DeleteStartupInput {
  id: ID!
}

input CreateInvestorInput {
  id: ID
  name: String
  logo: S3ObjectInput
  summary: String
  stage: [StageEnum]
  capitalInvestMin: Int
  capitalInvestMax: Int
  createdAt: AWSDateTime
  investorTeamId: ID!
  industryInvestorsId: ID
}
input UpdateInvestorInput {
  id: ID!
  name: String
  logo: S3ObjectInput
  summary: String
  stage: [StageEnum]
  capitalInvestMin: Int
  capitalInvestMax: Int
  createdAt: AWSDateTime
  investorTeamId: ID
  industryInvestorsId: ID
}
input DeleteInvestorInput {
  id: ID!
}
