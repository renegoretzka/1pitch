type User
  @model
  @key(name: "getUserByEmail", fields: ["email"])
  @auth(
    rules: [
      { allow: owner, ownerField: "id" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  email: AWSEmail
  phone: AWSPhone
  firstname: String
  lastname: String
  avatar: S3Object
  bio: String
  linkedIn: String
  teams: [TeamUserLink] @connection(keyName: "teamsByUser", fields: ["id"])
  createdAt: AWSDateTime
}

type TeamUserLink
  @model(queries: null, mutations: null, subscriptions: null)
  @key(name: "usersByTeam", fields: ["teamID"])
  @key(name: "teamsByUser", fields: ["userID"]) {
  id: ID!
  userID: ID!
  user: User @connection(fields: ["userID"])
  teamID: ID!
  team: Team @connection(fields: ["teamID"])
}

type Team
  @model(mutations: null)
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String
  logo: S3Object
  members: [TeamUserLink] @connection(keyName: "usersByTeam", fields: ["id"])
  startup: Startup
  investor: Investor
}

type Startup
  @model(mutations: null)
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String
  logo: S3Object
  summary: String
  pitch: S3Object
  industries: [Industry] @connection
  stage: [StageEnum]
  capitalDemand: Int
  team: Team! @connection
  createdAt: AWSDateTime
}

type Investor
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  name: String
  logo: S3Object
  summary: String
  industries: [Industry] @connection
  stage: [StageEnum]
  capitalInvestMin: Int
  capitalInvestMax: Int
  team: Team! @connection
  bookmarks: [Startup] @connection
  channels: [Channel] @connection
  createdAt: AWSDateTime
}

type Channel @model {
  id: ID!
  startup: Startup @connection
  investor: Investor @connection
  messages: [Message] @connection
  createdAt: AWSDateTime
}

type Message @model @auth(rules: [{ allow: owner, ownerField: "sender" }]) {
  id: ID!
  sender: User @connection
  channel: Channel @connection
  content: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Industry @model @auth(rules: [{ allow: groups, groups: ["admin"] }]) {
  id: ID!
  name: String
  startups: [Startup] @connection
  investors: [Investor] @connection
}

enum StageEnum {
  IDEA
  BUSINESS_PLAN
  MVP
  PAYING_CUSTOMERS
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Mutation {
  createTeam(input: CreateTeamInput!): Team @function(name: "1PitchTeam-${env}")
  updateTeam(input: UpdateTeamInput!): Team
    @function(name: "1PitchTeamAuthorizer-${env}")
    @function(name: "1PitchTeam-${env}")
  deleteTeam(input: DeleteTeamInput!): Team
    @function(name: "1PitchTeamAuthorizer-${env}")
    @function(name: "1PitchTeam-${env}")
}

input S3ObjectInput {
  bucket: String!
  region: String!
  key: String!
}
input CreateTeamInput {
  id: ID
  name: String!
  logo: S3ObjectInput
}
input UpdateTeamInput {
  id: ID!
  name: String
  logo: S3ObjectInput
}
input DeleteTeamInput {
  id: ID!
}
